// <auto-generated />
using System;
using DataAccessEfCore.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessEfCore.Migrations
{
    [DbContext(typeof(WochenberichtDBContext))]
    [Migration("20220325145612_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Admin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateEntry");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("Role");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Token");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserName");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Admins", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DateEntry = new DateTime(2010, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            FirstName = "Max",
                            LastName = "Mustermann",
                            Password = "12345678910!aA!",
                            Role = 0,
                            Token = "",
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("Domain.Models.Apprentice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateEntry");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("Role");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Token");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserName");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("InstructorID");

                    b.ToTable("Apprentices", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DateEntry = new DateTime(20, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "auszubildender@gmail.com",
                            FirstName = "Ruwen",
                            InstructorID = 1,
                            LastName = "Müller",
                            Password = "12345678910!aA!",
                            Role = 2,
                            Token = "",
                            UserName = "auszubildender@gmail.com"
                        },
                        new
                        {
                            ID = 2,
                            DateEntry = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "auszubildender2@gmail.com",
                            FirstName = "Kevin",
                            InstructorID = 2,
                            LastName = "McCallister",
                            Password = "12345678910!aA!",
                            Role = 2,
                            Token = "",
                            UserName = "auszubildender2@gmail.com"
                        });
                });

            modelBuilder.Entity("Domain.Models.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateEntry");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("Role");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Token");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserName");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Instructors", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DateEntry = new DateTime(2011, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ausbilder@gmail.com",
                            FirstName = "Uwe",
                            LastName = "Meier",
                            Password = "12345678910!aA!",
                            Role = 1,
                            Token = "",
                            UserName = "ausbilder@gmail.com"
                        },
                        new
                        {
                            ID = 2,
                            DateEntry = new DateTime(2010, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ausbilder2@gmail.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "12345678910!aA!",
                            Role = 1,
                            Token = "",
                            UserName = "ausbilder2@gmail.com"
                        });
                });

            modelBuilder.Entity("Domain.Models.Note", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasColumnName("Comment");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<int>("WeeklyReportPositionsID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("InstructorID");

                    b.HasIndex("WeeklyReportPositionsID")
                        .IsUnique();

                    b.ToTable("Notes", (string)null);
                });

            modelBuilder.Entity("Domain.Models.WeeklyReport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ApprenticeID")
                        .HasColumnType("int");

                    b.Property<int>("CalenderWeek")
                        .HasColumnType("int")
                        .HasColumnName("CalenderWeek");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateFrom");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateTo");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<int>("Page")
                        .HasColumnType("int")
                        .HasColumnName("Page");

                    b.Property<string>("SigningApprentice")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SigningApprentice");

                    b.Property<DateTime>("SigningDateApprentice")
                        .HasColumnType("datetime2")
                        .HasColumnName("SigningDateApprentice");

                    b.Property<DateTime>("SigningDateInstructor")
                        .HasColumnType("datetime2")
                        .HasColumnName("SigningDateInstructor");

                    b.Property<string>("SigningInstructor")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SigningInstructor");

                    b.Property<int>("StatusApprentice")
                        .HasColumnType("int")
                        .HasColumnName("StatusApprentice");

                    b.Property<int>("StatusInstructor")
                        .HasColumnType("int")
                        .HasColumnName("StatusInstructor");

                    b.HasKey("ID");

                    b.HasIndex("ApprenticeID");

                    b.HasIndex("InstructorID");

                    b.ToTable("WeeklyReport", (string)null);
                });

            modelBuilder.Entity("Domain.Models.WeeklyReportPosition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ApprenticeID")
                        .HasColumnType("int");

                    b.Property<int>("DailyHours")
                        .HasColumnType("int")
                        .HasColumnName("DailyHours");

                    b.Property<string>("DailyReport")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasColumnName("DailyReport");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("NoteID")
                        .HasColumnType("int");

                    b.Property<int>("WeeklyReportID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ApprenticeID");

                    b.HasIndex("WeeklyReportID");

                    b.ToTable("WeeklyReportPositions", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Apprentice", b =>
                {
                    b.HasOne("Domain.Models.Instructor", "Instructor")
                        .WithMany("Apprentices")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Domain.Models.Note", b =>
                {
                    b.HasOne("Domain.Models.Instructor", "Instructor")
                        .WithMany("Notes")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Models.WeeklyReportPosition", "WeeklyReportPosition")
                        .WithOne("Note")
                        .HasForeignKey("Domain.Models.Note", "WeeklyReportPositionsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("WeeklyReportPosition");
                });

            modelBuilder.Entity("Domain.Models.WeeklyReport", b =>
                {
                    b.HasOne("Domain.Models.Apprentice", "Apprentice")
                        .WithMany("WeeklyReports")
                        .HasForeignKey("ApprenticeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Instructor", "Instructor")
                        .WithMany("WeeklyReports")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Apprentice");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Domain.Models.WeeklyReportPosition", b =>
                {
                    b.HasOne("Domain.Models.Apprentice", "apprentice")
                        .WithMany("WeeklyReportPositions")
                        .HasForeignKey("ApprenticeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.WeeklyReport", "WeeklyReport")
                        .WithMany("WeeklyReportPositions")
                        .HasForeignKey("WeeklyReportID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WeeklyReport");

                    b.Navigation("apprentice");
                });

            modelBuilder.Entity("Domain.Models.Apprentice", b =>
                {
                    b.Navigation("WeeklyReportPositions");

                    b.Navigation("WeeklyReports");
                });

            modelBuilder.Entity("Domain.Models.Instructor", b =>
                {
                    b.Navigation("Apprentices");

                    b.Navigation("Notes");

                    b.Navigation("WeeklyReports");
                });

            modelBuilder.Entity("Domain.Models.WeeklyReport", b =>
                {
                    b.Navigation("WeeklyReportPositions");
                });

            modelBuilder.Entity("Domain.Models.WeeklyReportPosition", b =>
                {
                    b.Navigation("Note");
                });
#pragma warning restore 612, 618
        }
    }
}
